#!/usr/bin/env bash

SCRIPT_PATHNAME=`python -c "import os,sys; print os.path.realpath(\"$0\")"`
SCRIPT_PATH="$( cd "$( dirname "${SCRIPT_PATHNAME}" )" && pwd )"

# TODO: Specify the paths for BMC tool and DREAL
BMC=${SCRIPT_PATH}/bmc
SOLVER=${SCRIPT_PATH}/solver

#################################################################
# USAGE
#################################################################
usage()
{
    cat << EOF
usage: $0 options <*.drh> <options to dReal>

dReach: Bounded Model Checking for for Nonlinear Hybrid Systems

OPTIONS:
   -k      unrolling steps  (default: 3)
   -b      use BMC heuristic with disjunctive path encoding (default: do not use)
   -d      disjunctive path encoding (default: do not use)

EXAMPLE:

   dReach -k 10 bouncing_ball.drh --verbose --precision=0.001 --visualize

EOF
}

#################################################################
# Parse Option
#################################################################
K=3
while getopts "hbdk:p:i" OPTION
do
    case $OPTION in
        h)
            usage
            exit 1
            ;;
        k)
            K=$OPTARG
            ;;
	b)
	    BMCH=1 
	    ;;
	d)
	    BMCH=2
	    ;;
        \?)
            usage
            exit
            ;;
    esac
done

#################################################################
# Check main.native
#################################################################
if [ ! -e "$BMC" ]
then
    cat << EOF

Error: Can't find BMC at ${BMC}. Please compile it by typing "make" at
"dReal/tools" directory.
EOF
    exit 1
fi

if [ ! -e "$SOLVER" ]
then
    cat << EOF
Error: Can't find solver. Please try "build.sh" first to compile it.
EOF
    exit 1
fi

shift $(($OPTIND - 1))
if [[ ! -e $1 || ! ${1: -4} == ".drh" ]]
then
    usage
    exit 1
fi

BASE=${1%.drh}
DRH=$BASE.drh
PDRH=$BASE.preprocessed.drh

# Extract dReal Options
shift 1
SOLVER_OPT=$*
echo dReal Options: $SOLVER_OPT

# Preprocessing
sed "s/\/\/.*//g" $DRH | cpp -P -w > $PDRH



if [ $BMCH ]
then
    # Construct Heuristic function 
    if [ $BMCH -eq 1 ]
    then
	HEURISTIC=${BASE}_${K}.bh
	$BMC -k $K --bmc_heuristic $PDRH > ${HEURISTIC}
	SOLVER_OPT="${SOLVER_OPT} --bmc_heuristic ${HEURISTIC}"
    fi
    #  invoke dReal w/o paths
    SMT=${BASE}_${K}.smt2
    OUT=${BASE}_${K}.output
    $BMC -k $K $PDRH > ${SMT}
    echo SMT: ${SMT}
    ${SOLVER} ${SOLVER_OPT} ${SMT} --short_sat 2>&1 | tee $OUT
    RESULT=`tail -n 1 $OUT`
    if [[ $RESULT == "sat" ]]
    then
        echo "sat -- $P"
        exit 0
    fi
else
    # Enumerate all paths and call dReal with options
    PATH_NUM=0
    PATHS=`$BMC -k $K --pathgen $PDRH`
    if [[ $PATHS ]] ; then
	for P in $PATHS
	do
            SMT=${BASE}_${K}_${PATH_NUM}.smt2
            OUT=${BASE}_${K}_${PATH_NUM}.output
            $BMC -k $K --path "$P" $PDRH > ${SMT}
            echo SMT: ${SMT}, PATH : $P
            ${SOLVER} ${SOLVER_OPT} ${SMT} --short_sat 2>&1 | tee $OUT
            RESULT=`tail -n 1 $OUT`
            if [[ $RESULT == "sat" ]]
            then
		echo "sat -- $P"
		exit 0
            fi
            PATH_NUM=$((${PATH_NUM} + 1))
	done
	echo "Tried ${PATH_NUM} feasible paths, all of them are unsat."
    else
	echo There is no feasible path to check when k = $K.
    fi
fi
